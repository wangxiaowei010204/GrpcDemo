// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Hello.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcLibrary {
  public static partial class HelloService
  {
    static readonly string __ServiceName = "GrpcLibrary.HelloService";

    static readonly grpc::Marshaller<global::GrpcLibrary.GetMsgNumRequest> __Marshaller_GrpcLibrary_GetMsgNumRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetMsgNumRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcLibrary.GetMsgSumReply> __Marshaller_GrpcLibrary_GetMsgSumReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetMsgSumReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcLibrary.GetLotID> __Marshaller_GrpcLibrary_GetLotID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetLotID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcLibrary.GetLotAll> __Marshaller_GrpcLibrary_GetLotAll = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetLotAll.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcLibrary.GetMegNumMul> __Marshaller_GrpcLibrary_GetMegNumMul = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetMegNumMul.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcLibrary.GetMegNumMulReply> __Marshaller_GrpcLibrary_GetMegNumMulReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcLibrary.GetMegNumMulReply.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcLibrary.GetMsgNumRequest, global::GrpcLibrary.GetMsgSumReply> __Method_GetSum = new grpc::Method<global::GrpcLibrary.GetMsgNumRequest, global::GrpcLibrary.GetMsgSumReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSum",
        __Marshaller_GrpcLibrary_GetMsgNumRequest,
        __Marshaller_GrpcLibrary_GetMsgSumReply);

    static readonly grpc::Method<global::GrpcLibrary.GetLotID, global::GrpcLibrary.GetLotAll> __Method_test = new grpc::Method<global::GrpcLibrary.GetLotID, global::GrpcLibrary.GetLotAll>(
        grpc::MethodType.Unary,
        __ServiceName,
        "test",
        __Marshaller_GrpcLibrary_GetLotID,
        __Marshaller_GrpcLibrary_GetLotAll);

    static readonly grpc::Method<global::GrpcLibrary.GetMegNumMul, global::GrpcLibrary.GetMegNumMulReply> __Method_GetMul = new grpc::Method<global::GrpcLibrary.GetMegNumMul, global::GrpcLibrary.GetMegNumMulReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMul",
        __Marshaller_GrpcLibrary_GetMegNumMul,
        __Marshaller_GrpcLibrary_GetMegNumMulReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcLibrary.HelloReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HelloService</summary>
    [grpc::BindServiceMethod(typeof(HelloService), "BindService")]
    public abstract partial class HelloServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcLibrary.GetMsgSumReply> GetSum(global::GrpcLibrary.GetMsgNumRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcLibrary.GetLotAll> test(global::GrpcLibrary.GetLotID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcLibrary.GetMegNumMulReply> GetMul(global::GrpcLibrary.GetMegNumMul request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HelloService</summary>
    public partial class HelloServiceClient : grpc::ClientBase<HelloServiceClient>
    {
      /// <summary>Creates a new client for HelloService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HelloServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HelloService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HelloServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HelloServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HelloServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcLibrary.GetMsgSumReply GetSum(global::GrpcLibrary.GetMsgNumRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcLibrary.GetMsgSumReply GetSum(global::GrpcLibrary.GetMsgNumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetMsgSumReply> GetSumAsync(global::GrpcLibrary.GetMsgNumRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetMsgSumReply> GetSumAsync(global::GrpcLibrary.GetMsgNumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSum, null, options, request);
      }
      public virtual global::GrpcLibrary.GetLotAll test(global::GrpcLibrary.GetLotID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return test(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcLibrary.GetLotAll test(global::GrpcLibrary.GetLotID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_test, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetLotAll> testAsync(global::GrpcLibrary.GetLotID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return testAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetLotAll> testAsync(global::GrpcLibrary.GetLotID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_test, null, options, request);
      }
      public virtual global::GrpcLibrary.GetMegNumMulReply GetMul(global::GrpcLibrary.GetMegNumMul request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMul(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcLibrary.GetMegNumMulReply GetMul(global::GrpcLibrary.GetMegNumMul request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMul, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetMegNumMulReply> GetMulAsync(global::GrpcLibrary.GetMegNumMul request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMulAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcLibrary.GetMegNumMulReply> GetMulAsync(global::GrpcLibrary.GetMegNumMul request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMul, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HelloServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HelloServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HelloServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSum, serviceImpl.GetSum)
          .AddMethod(__Method_test, serviceImpl.test)
          .AddMethod(__Method_GetMul, serviceImpl.GetMul).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HelloServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSum, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcLibrary.GetMsgNumRequest, global::GrpcLibrary.GetMsgSumReply>(serviceImpl.GetSum));
      serviceBinder.AddMethod(__Method_test, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcLibrary.GetLotID, global::GrpcLibrary.GetLotAll>(serviceImpl.test));
      serviceBinder.AddMethod(__Method_GetMul, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcLibrary.GetMegNumMul, global::GrpcLibrary.GetMegNumMulReply>(serviceImpl.GetMul));
    }

  }
}
#endregion
